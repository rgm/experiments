(ns user
  "Try using redis streams as the ledger/backbone for a commander architecture."
  (:require
   [clojure.core.async :as a]
   [clojure.string :as str]
   [integrant.core :as ig]
   [integrant.repl :refer [halt reset]]
   [malli.core :as m]
   [portal]
   [taoensso.carmine :as car :refer [wcar]]
   [taoensso.timbre :as timbre]))

;; DRAMATIS PERSONAE:
;; evt ......... Event, a map
;; cmd ......... Command, a map
;; ci-evt ...... Command Issuance, an event with an issued-command payload
;; ca-evt ...... Command Acceptance, an event with an accepted-command payload
;; cr-evt ...... Command Rejection, an event with a rejected-command payload
;; eid ......... Event ID, a timestamp string in Redis streams
;;               (see https://redis.io/docs/data-types/streams/#entry-ids
;; cid ......... Command ID, a uuid (so that it can be generated by a client)
;; ts .......... Timestamp, an instant

;;
;; schemas
;;

(defn validate! [spec value]
  (when-not (m/validate spec value)
    (let [data {:reason ::malli-failure
                :value value
                :spec spec
                :err (m/explain spec value)}]
      (throw (ex-info "malli failure" data)))))

(def schema:evt-name symbol?)

(def schema:cmd-name symbol?)

(def schema:evt
  "Events are records of effects that have happened in the system, for
   secondary reactions (eg. updating the UI) or updating derived data
   (eg. the audit log on a project).

   The only kind of event that can lead to a system mutation is a
   `:command/issued` event. (Note the lower case and passive voice).

   Possible uses for metadata:
   - including a set of audience user-ids to let downstream
   processes know how to distribute messages;
   - ..."
  (let [user-id string?]
    [:map {:closed true}
     [:evt/name      schema:evt-name]
     [:evt/author-id user-id]
     [:evt/data      :map]
     [:evt/metadata  {:optional true} :map]
     ;; id, parent-id, ts optional b/c needs id from redis
     [:evt/parent-id {:optional true} :string]
     [:evt/id        {:optional true} :string]
     [:evt/ts        {:optional true} inst?]]))

(def schema:cmd
  "Commands are expressions of a user's intent, as data.

   They are observable in the event ledger as (submitted, accepted) or
   (submitted, rejected) pairs of events. (On the front-end, we might see a
   transient (submitted, bounced) pair, signifying something didn't even make
   it into the ledger usually for authz reasons).

   They flow into the ledger, where the fact of a command is quickly persisted
   as an event. A command/submitted event wrapping the command flows into the
   commander, where it's acted on, and will lead to either an accepted event or
   a rejected event (plus some optional other side events that happened. Note
   that the commander issuing a command in response is also a kind of side
   event :mindblown:).

   Commands are named with all-caps imperative voice, like :DO-A-THING!"
  (let [user-id string?]
    [:map {:closed true}
     [:cmd/id     uuid?]
     [:cmd/name   schema:cmd-name]
     [:cmd/author user-id]
     [:cmd/data   [:maybe :map]]]))

(def schema:issued-cmd
  "Regardless of whether a command is ultimately accepted or rejected,
   processing is kicked off by recording the fact that it was issued (which is
   always true).
   "
  [:and
   schema:evt
   [:evt/name 'command/issued]
   [:evt/data schema:cmd]])

;;
;; event-filtering predicates
;; an event observer

(defn for-audience? [user-id]
  (fn [evt] (= user-id (get-in evt [:evt/metadata :audience-id]))))

;;
;; ledger
;;

(defn redis-entry-id->ts [entry-id]
  (let [ms (first (str/split entry-id #"-"))]
    (java.time.Instant/ofEpochMilli (parse-long ms))))

(defn redis-entry->evt [re]
  (let [[eid [_ evt]] re]
    (assoc evt :evt/id eid :evt/ts (redis-entry-id->ts eid))))

(defn get-all-evts [ledger]
  ;; nb. redis stream ids are timestamps, just derived from redis entry id
  ;; so extract an inst to get a ts; we don't need to record this separately
  (->> (wcar (:redis ledger) (car/xrange (:stream ledger) "-" "+"))
       (map redis-entry->evt)))

(defprotocol ILedger
  (start-delivering! [this] [this last-eid]
    "Start the ledger distributing new events")
  (stop-delivering! [this]
    "Stop the ledger from distributing new events")
  (delivering? [this]
    "Is the ledger delivering events?")
  (push-event [this evts]
    "Add an event to the ledger for distribution.")
  (listen-for-events [this chan]
    "Connect chan to the ledger for delivery of new events.")
  (stop-listening-for-events [this chan]
    "Disconnect chan from the ledger.")
  (trim-events [this eid]
    "Trim old events before eid."))

(defn read-events
  "Read events from a Redis stream.

   The call will block until the end of timeout, and will:
   - succeed with valid events;
   - return nil if no event arrived during the timeout; or
   - throw if the event that was pulled from the stream was not valid.

   Pass 0 for timeout to wait forever. Pass $ for last-eid to get the 'next'
   event."
  [redis stream batch-size timeout-ms last-eid]
  (when-let [redis-entries (wcar redis (car/xread
                                        "COUNT" batch-size
                                        "BLOCK" timeout-ms
                                        "STREAMS" stream
                                        last-eid))]
    (let [evts (->> redis-entries first second (map redis-entry->evt))]
      (doseq [evt evts] (validate! schema:evt evt))
      evts)))

(defrecord RedisLedger [redis stream chan *state]
  ;; conceal redis's presence behind a facade ... the ledger's job is only to
  ;; persist events and then pass them on, not to act on them
  ;; pass in a configured channel; the delivery loop will throw events onto it
  ;; as they occur
  ILedger
  (start-delivering! [this]
    (start-delivering! this "$")) ;; "$" in redis is "last event"
  (start-delivering! [_ last-eid]
    (timbre/debug "starting delivery loop")
    (swap! *state assoc :delivering? true)
    (swap! *state assoc :mult (a/mult chan))
    ;; block on redis reads on a separate thread and ship events off on the
    ;; channel when they arrive
    (a/thread
      (loop [last-eid last-eid]
        (timbre/debug "running delivery loop")
        (if (:delivering? @*state)
          (let [batch-size 1
                timeout-ms 0 ;; wait "forever"
                evts (read-events redis stream batch-size timeout-ms
                                  last-eid)]
            (doseq [evt evts] (a/>!! chan evt))
            (recur (-> evts last :evt/id)))
          (do
            (timbre/debug "stopping delivery loop")
            (swap! *state assoc :delivering? false)
            :done))))
    :started)

  (stop-delivering! [_]
    ;; nb. will keep delivering til the last XREAD timeout expires with nil or
    ;; possibly one last event
    (timbre/debug "marking delivery loop as stopped")
    (swap! *state assoc :delivering? false)
    :stopped)

  (delivering? [_]
    (boolean (:delivering? @*state)))

  (push-event [_ evt]
    (timbre/debug "pushing evt to redis")
    (validate! schema:evt evt)
    (wcar redis (car/xadd stream
                          ; "MAXLEN" "~" 5 ;; to cap stream size in redis
                          "*"
                          "evt" evt)))

  (listen-for-events [_ chan]
    ;; audience fan-out using mult/tap
    ;; nb. the provided chan can slow down the mult; make sure they're buffered
    ;; correctly. Provide transducers on the channels to filter for specific
    ;; events.
    (timbre/debug "connecting" chan "to ledger mult")
    (a/tap (:mult @*state) chan))

  (stop-listening-for-events [_ chan]
    (timbre/debug "disconnecting" chan "from ledger mult")
    (a/untap (:mult @*state) chan))

  (trim-events [_ eid]
    ;; car/xtrim seems to have trouble rn, so use redis-call
    ;; https://github.com/taoensso/carmine/issues/283
    (wcar redis (car/redis-call [:xtrim stream "MINID" "~" eid]))))

;;
;; integrant
;;

(def system-config
  {::portal              {}
   ::state               {:counter 0}
   ::redis               {:uri "redis://localhost:6379/2"}
   ::ledger              {:redis (ig/ref ::redis) :stream "myledger"}
   ::commander           {:ledger (ig/ref ::ledger) :*state (ig/ref ::state)}
   #_#_::consumer-1-fizzbuzz {:ledger (ig/ref ::ledger) :*state (ig/ref ::state)}
   #_#_::consumer-2-archiver {:ledger (ig/ref ::ledger) :*state (ig/ref ::state)}})

;; "state" component
;; system state would usually be a postgres db or such; just an atom here
;; for illustration

(defmethod ig/init-key ::state
  [_ {:keys [counter]}]
  (atom {:counter counter
         ;; last event-ids processed
         ;; (in practice these should be persisted someplace. Here we'll
         ;; restart the commander from earliest message every time the system
         ;; starts up).
         :last-eids {::commander 0
                     ::consumer-1-fizzbuzz 0
                     ::consumer-2-archiver 0}}))

(defmethod ig/init-key ::portal [_ _] (portal/start-portal))
(defmethod ig/halt-key! ::portal [_ _] (portal/stop-portal))

;; redis component

(defmethod ig/init-key ::redis
  [_ {:keys [uri]}]
  (let [opts {:pool (car/connection-pool {}) :spec {:uri uri}}]
    (when-not (= "PONG" (wcar opts (car/ping)))
      (throw (ex-info "can't communicate with redis" opts)))
    opts))

;; ledger component

(defmethod ig/init-key ::ledger
  [_ {:keys [stream redis]}]
  ;; a sliding buffer is arguably what we want: at a certain point we're
  ;; interested in novelty and if downstream can't keep up we sacrifice the old
  ;; events
  (let [chan (a/chan (a/sliding-buffer 256))
        ledger (map->RedisLedger {:redis redis
                                  :stream stream
                                  :chan chan
                                  :*state (atom {})})]
    (start-delivering! ledger)
    ledger))

(defmethod ig/halt-key! ::ledger
  [_ this]
  (a/close! (:chan this))
  (stop-delivering! this))

;; commander component

(defn get-cmd-name [evt]
  (validate! schema:issued-cmd evt)
  (get-in evt [:evt/id :cmd-name]))

(defmulti transact!
  "Mutate system state in response to an issued command."
  (fn [_*state evt] (get-cmd-name evt)))

(defn reject-cmd [evt reason data]
  (let [parent-id (:evt/id evt)
        cmd-name (get-cmd-name evt)]
    #:evt{:name 'command/rejected
          :parent-id parent-id
          :data {:cmd/name cmd-name
                 :reason "no handler for cmd"}}))

(defmethod transact! :default
  [_ evt]
  ;; Default action is to reject the command and not change system state. We
  ;; allow-list new commands by implementing new multimethods. This lets us put
  ;; the method bodies closer to the other code for the specific domain.
  (reject-cmd evt "no-handler-for-cmd" {}))

(defn matches-evt?
  [evts]
  (let [pred (set evts)]
    (validate! [:set schema:evt-name] pred)
    pred))

(defn process-command! [*state evt]
  (timbre/debug "transacting command" (get-cmd-name evt))
  (tap> ["COMMANDER GOT EVENT" evt])
  (try
    (transact! *state evt)
    (catch Exception ex
      (reject-cmd evt "exception-in-transact!"
                  {:message (ex-message ex)
                   :data (ex-data ex)}))))

(defmethod ig/init-key ::commander
  ;; the commander's job is to act on command-submitted events
  ;; it provides a channel for the ledger to stuff new events into
  ;; we use a filter on the channel to pay attention to only issued commands
  [_ {:keys [*state ledger]}]
  (timbre/info "starting commander component")
  (let [chan (a/chan 1 (matches-evt? #{'command/submitted}))
        worker (a/go-loop []
                 (when-some [evt (a/<! chan)]
                   (process-command! *state evt)
                   (recur)))]
    (listen-for-events ledger chan)
    {:chan chan :worker worker :ledger ledger}))

(defmethod ig/halt-key! ::commander
  [_ this]
  (stop-listening-for-events (:ledger this) (:chan this))
  (a/close! (:chan this)))

;; example consumer component
;; eg a logger that fires when the counter achieves fizzbuzz

(defmethod ig/init-key ::consumer-1-fizzbuzz
  [_ {:keys [ledger *state]}]
  (let [chan (a/chan (a/dropping-buffer 8)
                     (filter (constantly true)))]
    (listen-for-events ledger chan)))

;; example consumer component
;; eg a process that persists old events someplace else and trims the old event
;; stream so it doesn't grow without bound in redis

(defmethod ig/init-key ::consumer-2-archiver
  [_ {:keys [ledger *state]}]
  (let [chan (a/chan (a/dropping-buffer 8)
                     (filter (constantly true)))]
    (listen-for-events ledger chan)))

(defn go []
  (integrant.repl/set-prep! #(ig/prep system-config))
  (integrant.repl/go))

;;
;; Example of the specific domain of an incrementing counter
;;

(defmethod transact! 'INCREMENT-COUNTER!
  [*state evt]
  (timbre/debug "processing 'INCREMENT-COUNTER!")
  (let [parent-id (:evt/id evt)
        cmd-name (get-cmd-name evt)
        authzd? (= (:evt/author-id evt) "authorized-author")]
    ;; increment the counter here if authzd
    (when-not authzd?
      (throw (ex-info "not authorized" {:evt/author-id (:evt/author-id evt)
                                        :evt/id parent-id
                                        :cmd/name cmd-name})))
    (swap! *state :counter inc)
    #:evt{:name      'command/accepted
          :parent-id parent-id
          :data      {:cmd/name cmd-name}}))

(defn increment-counter!
  "Issue a command to increment the counter."
  [ledger author-id]
  (push-event ledger
              #:evt{:name 'command/submitted
                    :author-id author-id
                    :data #:cmd{:name 'INCREMENT-COUNTER!
                                :data {}}}))

(comment
  (alter-var-root #'*out* (constantly *out*)) ;; https://stackoverflow.com/a/27056185
  (try (go) (catch Exception ex (print (ex-data ex))))
  (halt)
  (try (reset) (catch Exception ex (tap> (ex-data ex))))
  (do
    (go)
    (require '[integrant.repl.state :as irs])
    (def redis (::redis irs/system))
    (def ledger (::ledger irs/system))
    (def stream (:stream ledger)))
  (start-delivering! ledger)
  (stop-delivering! ledger)

  ;; use futures or you'll block your repl
  (future (tap> (read-events redis "myledger" 1 0 "$")))
  (future (tap> (a/<!! (:chan ledger))))

  (increment-counter! ledger "authorized-author")
  (increment-counter! ledger "unauthorized-author")
  (last (get-all-evts ledger))
  (::state irs/system))

;; todo
;; - get command acceptance working
;; - get command rejection working
