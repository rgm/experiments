{"version":3,"sources":["rgm/app.cljs"],"mappings":";AAMA,AAAA,AAAMA,AAAgBC,AAAMC;AAA5B,AACE,AAAMC,AAAU,AAACC,AAASF;AACpBG,AAAU,AAACC,AAAQ,AAAA,AAAOH;AAC1BI,AAAU,AAAQC,AAAQH;AAC1BI,AAAc,AAAAC,AAAeH,AACf,AAAaN,AACb,AAAA,AACA;AANpB,AAOE,AAAWQ,AAAKE;;AAChB,AAAWF;;AACXA;;AAEJ,AAAA,AAAMG,AAA+BC,AAAUX;AAA/C,AACE,AAAMC,AAAM,AAACC,AAASF;AAAtBY,AACsBX;AADtBW,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACcK;AADd,AAEE,AAAWN;;AAEX,AAAAO,AAAA,AAAAC,AAAqBF;AAArBG,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQS;AAAR,AAAA,AACE,AAACC,AAAiBD,AAAa,AAAOpB,AAAUoB;;AADlD;AAAA,AAAAb;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAAJ,AAAAD;AAAA,AAAA,AAAAK;AAAA,AAAA,AAAAL,AAAAK;AAAA,AAAA,AAAA,AAAAC,AAAAN;AAAA,AAAAO,AAAA,AAAAC,AAAAR;AAAA,AAAA,AAAA,AAAAS,AAAAT;AAAAO;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAI,AAAAX,AAAQa;AAAR,AAAA,AACE,AAACC,AAAiBD,AAAa,AAAOpB,AAAUoB;;AADlD;AAAA,AAAA,AAAAD,AAAAZ;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAGJ,AAAA,AAAMe,AAAcC;AAApB,AACE,AAAMC,AAAW,AAAA,AAACC;AACZC,AAAW,AAAA,AAACD;AADlB,AAEE,AAAA,AAAA,AAACE,AAEC,AAAeC;AAAf,AAAqB,AAAMhC,AAAK,AAAA,AAAAiC,AAAC1C,AAAgBqC,AAAOI;AAAnC,AACE,AAACE,AAAOJ,AAAW9B;;AAEnB,AAAA,AAAAiC,AAAC9B,AAAiB2B,AAAWE;AALtD,AAQE,AAAgBA,AAAKG;AAArB,AAAgC,AAAA,AAAAF,AAAC9B,AAAiB2B,AAAWE;AAR/D,AAWE,AAAYL;AAAZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAS;AAAA,AACsC,AAAAA,AAACF,AAAON;;;;AAEpD,AAAA,AAAMS;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKI,AAAMzC,AAAU,AAAC0C,AAAeC;AAAhC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGb,AAAoB9B;;;AAE3B,AAAA,AAAwB4C;AAAxB,AAAA;;AAEA,AAAA,AAAuBC;AAAvB,AACE,AAAMC,AAAS,AAAA,AAACC;AAAhB,AACE,AAAA,AAACC,AAAaP,AAAMK","names":["rgm.app/Vega:did-mount","a-ref","this-component","props","reagent.core/props","vega-spec","cljs.core/clj->js","runtime","js/vega","view","js/vega.View","js/vega.Warn","rgm.app/Vega:did-update","vega-view","map__27470","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","debug","seq__27472","cljs.core/seq","chunk__27473","count__27474","i__27475","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","dataset-name","js/console.debug","rgm.app/VegaRenderer","_props","*a-ref","cljs.core.atom","*vega-view","reagent.core.create_class","this","cljs.core/deref","cljs.core/reset!","_old-argv","p1__27476#","rgm.app/Root","rgm.vega/bar-chart","rgm.vega/bar-data","rgm.app/stop","rgm.app/start","host-dom","js/document.getElementById","reagent.dom.render"],"sourcesContent":["(ns rgm.app\n  \"Entry point for single-page app.\"\n  (:require [reagent.dom :as rdom]\n            [reagent.core :as rg]\n            [rgm.vega :as vega]))\n\n(defn Vega:did-mount [a-ref this-component]\n  (let [props     (rg/props this-component)\n        vega-spec (clj->js (:spec props))\n        runtime   (.parse js/vega vega-spec)\n        view      (-> (js/vega.View. runtime)\n                      (.initialize a-ref)\n                      (.renderer \"svg\")\n                      (.hover))]\n    (.logLevel view js/vega.Warn)\n    (.runAsync view)\n    view))\n\n(defn Vega:did-update [^js/vega.View vega-view this-component]\n  (let [props (rg/props this-component)\n        {:keys [debug]} props]\n    (.runAsync vega-view)\n    ;; debug-log requested datasets\n    (doseq [dataset-name debug]\n      (js/console.debug dataset-name (.data vega-view dataset-name)))))\n\n(defn VegaRenderer [_props]\n  (let [*a-ref     (atom nil)\n        *vega-view (atom nil)]\n    (rg/create-class\n     {:component-did-mount\n      (fn did-mount [this] (let [view (Vega:did-mount @*a-ref this)]\n                             (reset! *vega-view view)\n                             ;; give it one initial bump, in case of static data\n                             (Vega:did-update @*vega-view this)))\n\n      :component-did-update\n      (fn did-update [this _old-argv] (Vega:did-update @*vega-view this))\n\n      :reagent-render\n      (fn render [_props]\n        [:div {:class \"w-full h-full\" :ref #(reset! *a-ref %)}])})))\n\n(defn Root []\n  [:div\n   [:h2 {:class \"text-red-500 mt-5\"} \"hi from within react with some styling\"]\n   [:h3 {:class \"font-bold mt-10 mb-4\"} \"here is a vega graph generated through react\"]\n   [:div {:class \"w-1/2 h-64 shadow p-3\"}\n    (let [vega-spec (vega/bar-chart vega/bar-data)]\n      [VegaRenderer {:spec vega-spec :debug [\"table\"]}])]])\n\n(defn ^:dev/before-load stop [])\n\n(defn ^:dev/after-load start []\n  (let [host-dom (js/document.getElementById \"app\")]\n    (rdom/render [Root] host-dom)))\n"]}