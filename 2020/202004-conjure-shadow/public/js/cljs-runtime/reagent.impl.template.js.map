{"version":3,"sources":["reagent/impl/template.cljs"],"mappings":"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","names":["reagent.impl.template/re-tag","this__4363__auto__","writer__4364__auto__","opt__4365__auto__","cljs.core/-write","reagent.impl.template/NativeWrapper","reagent.impl.template/->NativeWrapper","tag","id","className","reagent.impl.template/adapt-react-class","c","reagent.impl.template/hiccup-tag?","x","reagent.impl.util/named?","reagent.impl.template/valid-tag?","cljs.core/ifn?","reagent.impl.template/prop-name-cache","reagent.impl.template/cache-get","o","k","goog.object/get","reagent.impl.template/cached-prop-name","temp__5737__auto__","k'","cljs.core/name","v","reagent.impl.util/dash-to-prop-name","goog.object/set","reagent.impl.template/kv-conv","G__28318","reagent.impl.template/convert-prop-value","reagent.impl.util/js-val?","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","args","cljs.core.apply","reagent.impl.template/custom-prop-name-cache","reagent.impl.template/cached-custom-prop-name","reagent.impl.template/custom-kv-conv","G__28320","reagent.impl.template/convert-custom-prop-value","reagent.impl.template/set-id-class","props","id-class","class","G__28321","cljs.core.assoc","reagent.impl.util.class_names","or__4120__auto__","reagent.impl.template/convert-props","G__28322","reagent.impl.template/make-element*","argv","component","jsprops","first-child","compiler","G__28323","cljs.core/count","js/module$node_modules$react$index.createElement","reagent.impl.protocols/as-element","cljs.core.nth","a","reagent.impl.template/HiccupTag","reagent.impl.template/->HiccupTag","custom","reagent.impl.template/parse-tag","hiccup-tag","vec__28324","cljs.core/re-matches","cljs.core/next","clojure.string/replace","js/Error","reagent.impl.component/comp-name","cljs.core.not_EQ_","reagent.impl.template/reag-element","reagent.impl.component/as-class","temp__5739__auto__","key","reagent.impl.util/react-key-from-vec","reagent.impl.template/functional-reag-element","reagent.impl.component/react-class?","cljs.core/meta","cljs.core.subvec","reagent.impl.component/functional-render-fn","reagent.impl.template/fragment-element","hasprops","reagent.impl.protocols/make-element","js/module$node_modules$react$index.Fragment","reagent.impl.template/tag-name-cache","reagent.impl.template/cached-parse","s","reagent.impl.template/native-element","parsed","first","reagent.impl.input/input-component?","input-class","reagent.impl.component/create-class","reagent.impl.input/input-spec","cljs.core/with-meta","reagent.impl.util/get-react-key","reagent.impl.template/expand-seq","cljs.core.into_array","p1__28327#","cljs.core.map","reagent.impl.template/expand-seq-dev","val","cljs.core/vector?","reagent.impl.template/expand-seq-check","vec__28328","ctx","res","derefed","reagent.ratom/check-derefs","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","reagent.impl.util.hiccup_err","reagent.impl.template/hiccup-element","n","pos","G__28331","cljs.core._EQ_","cljs.core.subs","reagent.impl.template/vec-to-elem","functional-components?","js/console.error","cljs.core.pr_str","cljs.core/keyword-identical?","reagent.impl.template/as-element*","cljs.core/seq?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","reagent.impl.template/create-compiler","opts","cljs.core.gensym","js/reagent","js/reagent.impl","js/reagent.impl.template","js/reagent.impl.template.t_reagent$impl$template28333","reagent.impl.template/t_reagent$impl$template28333","_28335","meta28334","reagent.impl.template/->t_reagent$impl$template28333","this","reagent.impl.template/default-compiler*","reagent.impl.template/default-compiler","reagent.impl.template/set-default-compiler!"],"sourcesContent":["(ns reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [reagent.impl.util :as util :refer [named?]]\n            [reagent.impl.component :as comp]\n            [reagent.impl.batching :as batch]\n            [reagent.impl.input :as input]\n            [reagent.impl.protocols :as p]\n            [reagent.ratom :as ratom]\n            [reagent.debug :refer-macros [dev? warn]]\n            [goog.object :as gobj]))\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [tag id className])\n\n(defn adapt-react-class\n  [c]\n  (->NativeWrapper c nil nil))\n\n;;; Common utilities\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n;;; Props conversion\n\n;; TODO: Move prop-name caches to the compiler object, if this\n;; conversion can be configured.\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (gobj/get o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set prop-name-cache (name k) v)\n        v))\n    k))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-prop-name k) (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (util/js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n;; Previous few functions copied for custom elements,\n;; without mapping from class to className etc.\n\n(def custom-prop-name-cache #js{})\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get custom-prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set custom-prop-name-cache (name k) v)\n        v))\n    k))\n\n(defn custom-kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-custom-prop-name k) (convert-prop-value v))))\n\n(defn convert-custom-prop-value [x]\n  (cond (util/js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv custom-kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id (.-id id-class)\n        class (.-className id-class)]\n    (cond-> props\n      ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id)\n           (nil? (:id props)))\n      (assoc :id id)\n\n      ;; Merge classes\n      class\n      ;; Note: someone might use React-style :className property,\n      ;; this is the only place where that needs special case. Using\n      ;; :class and :className together is not supported.\n      (assoc :class (util/class-names class (or (:class props) (:className props)))))))\n\n(defn convert-props [props ^clj id-class]\n  (let [class (:class props)\n        props (-> props\n                  (cond-> class (assoc :class (util/class-names class)))\n                  (set-id-class id-class))]\n    (if (.-custom id-class)\n      (convert-custom-prop-value props)\n      (convert-prop-value props))))\n\n;;; Conversion from Hiccup forms\n\n(defn make-element* [argv component jsprops first-child compiler]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement component jsprops)\n\n    1 (react/createElement component jsprops\n          (p/as-element compiler (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                           (.push a (p/as-element compiler v)))\n                         a)\n                       #js [component jsprops] argv))))\n\n(deftype HiccupTag [tag id className custom])\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id className] (->> hiccup-tag name (re-matches re-tag) next)\n        className (when-not (nil? className)\n                    (string/replace className #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\" (comp/comp-name)))\n    (->HiccupTag tag\n                 id\n                 className\n                 ;; Custom element names must contain hyphen\n                 ;; https://www.w3.org/TR/custom-elements/#custom-elements-core-concepts\n                 (not= -1 (.indexOf tag \"-\")))))\n\n(defn reag-element [tag v compiler]\n  (let [c (comp/as-class tag compiler)\n        jsprops #js {}]\n    (set! (.-argv jsprops) v)\n    (when-some [key (util/react-key-from-vec v)]\n      (set! (.-key jsprops) key))\n    (react/createElement c jsprops)))\n\n(defn functional-reag-element [tag v compiler]\n  ;; TODO: If using functional elements, drop support for meta class methods.\n  (if (or (comp/react-class? tag)\n          (:should-component-update (meta tag)))\n    ;; as-class unncessary later as tag is always class\n    (let [c (comp/as-class tag compiler)\n          jsprops #js {}]\n      (set! (.-argv jsprops) v)\n      (when-some [key (util/react-key-from-vec v)]\n        (set! (.-key jsprops) key))\n      (react/createElement c jsprops))\n    (let [jsprops #js {}]\n      (set! (.-reagentRender jsprops) tag)\n      (set! (.-argv jsprops) (subvec v 1))\n      ; (set! (.-opts jsprops) opts)\n      (when-some [key (util/react-key-from-vec v)]\n        (set! (.-key jsprops) key))\n      (react/createElement (comp/functional-render-fn compiler tag) jsprops))))\n\n(defn fragment-element [argv compiler]\n  (let [props (nth argv 1 nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-prop-value (if hasprops props))\n                    #js {})\n        first-child (+ 1 (if hasprops 1 0))]\n    (when-some [key (util/react-key-from-vec argv)]\n      (set! (.-key jsprops) key))\n    (p/make-element compiler argv react/Fragment jsprops first-child)))\n\n(def tag-name-cache #js {})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (let [v (parse-tag x)]\n      (gobj/set tag-name-cache x v)\n      v)))\n\n(defn native-element [parsed argv first compiler]\n  (let [component (.-tag parsed)\n        props (nth argv first nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-props (if hasprops props) parsed)\n                    #js {})\n        first-child (+ first (if hasprops 1 0))]\n    (if (input/input-component? component)\n      (let [input-class (or (.-reagentInput compiler)\n                            (let [x (comp/create-class input/input-spec compiler)]\n                              (set! (.-reagentInput compiler) x)\n                              x))]\n        (-> [input-class argv component jsprops first-child compiler]\n            (with-meta (meta argv))\n            (->> (p/as-element compiler))))\n      (do\n        (when-some [key (-> (meta argv) util/get-react-key)]\n          (set! (.-key jsprops) key))\n        (p/make-element compiler argv component jsprops first-child)))))\n\n(defn expand-seq [s compiler]\n  (into-array (map #(p/as-element compiler %) s)))\n\n(defn expand-seq-dev [s ^clj o compiler]\n  (into-array (map (fn [val]\n                     (when (and (vector? val)\n                                (nil? (util/react-key-from-vec val)))\n                       (set! (.-no-key o) true))\n                     (p/as-element compiler val))\n                   s)))\n\n(defn expand-seq-check [x compiler]\n  (let [ctx #js {}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx compiler))]\n    (when derefed\n      (warn (util/hiccup-err x (comp/comp-name) \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when (.-no-key ctx)\n      (warn (util/hiccup-err x (comp/comp-name) \"Every element in a seq should have a unique :key\")))\n    res))\n\n(defn hiccup-element [v compiler]\n  (let [tag (nth v 0 nil)\n        n (name tag)\n        pos (.indexOf n \">\")]\n    (case pos\n      -1 (native-element (cached-parse n) v 1 compiler)\n      0 (let [component (nth v 1 nil)]\n          (assert (= \">\" n) (util/hiccup-err v (comp/comp-name) \"Invalid Hiccup tag\"))\n          (native-element (->HiccupTag component nil nil nil) v 2 compiler))\n      ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n      ;; Apply metadata (e.g. :key) to the outermost element.\n      ;; Metadata is probably used only with sequeneces, and in that case\n      ;; only the key of the outermost element matters.\n      (recur (with-meta [(subs n 0 pos)\n                         (assoc (with-meta v nil) 0 (subs n (inc pos)))]\n                        (meta v))\n             compiler))))\n\n(defn vec-to-elem [v compiler functional-components?]\n  (when (nil? compiler)\n    (js/console.error \"vec-to-elem\" (pr-str v)))\n  (assert (pos? (count v)) (util/hiccup-err v (comp/comp-name) \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (util/hiccup-err v (comp/comp-name) \"Invalid Hiccup form\"))\n    (cond\n      (keyword-identical? :<> tag)\n      (fragment-element v compiler)\n\n      (hiccup-tag? tag)\n      (hiccup-element v compiler)\n\n      (instance? NativeWrapper tag)\n      (native-element tag v 1 compiler)\n\n      :else (if functional-components?\n              (functional-reag-element tag v compiler)\n              (reag-element tag v compiler)))))\n\n(defn as-element* [x compiler functional-components?]\n  (cond (util/js-val? x) x\n        (vector? x) (vec-to-elem x compiler functional-components?)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x compiler)\n                   (expand-seq x compiler))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(defn create-compiler [opts]\n  (let [id (gensym)]\n    (reify p/Compiler\n      ;; This is used to as cache key to cache component fns per compiler\n      (get-id [this] id)\n      (as-element [this x]\n        ;; TODO: Select on Compiler object initialization correct as-element call.\n        (as-element* x this (true? (:functional-components? opts))))\n      (make-element [this argv component jsprops first-child]\n        (make-element* argv component jsprops first-child this)))))\n\n(def default-compiler* (create-compiler {}))\n(def ^:dynamic default-compiler default-compiler*)\n\n(defn set-default-compiler! [compiler]\n  (set! default-compiler compiler))\n"]}