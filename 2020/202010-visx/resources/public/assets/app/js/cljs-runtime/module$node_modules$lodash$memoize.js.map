{
"version":3,
"file":"module$node_modules$lodash$memoize.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,kCAAf,CAAuD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkD/FC,QAASA,QAAO,CAACC,IAAD,CAAOC,QAAP,CAAiB,CAC/B,GAAmB,UAAnB,EAAI,MAAOD,KAAX,EAA8C,IAA9C,EAAkCC,QAAlC,EAAyE,UAAzE,EAAsD,MAAOA,SAA7D,CACE,KAAM,KAAIC,SAAJ,CAhDYC,qBAgDZ,CAAN,CAEF,IAAIC,SAAWA,QAAQ,EAAG,CAAA,IACpBC,KAAOC,SADa,CAEpBC,IAAMN,QAAA,CAAWA,QAAA,CAASO,KAAT,CAAe,IAAf,CAAqBH,IAArB,CAAX,CAAwCA,IAAA,CAAK,CAAL,CAF1B,CAGpBI,MAAQL,QAARK,CAAiBA,KAErB,IAAIA,KAAA,CAAMC,GAAN,CAAUH,GAAV,CAAJ,CACE,MAAOE,MAAA,CAAME,GAAN,CAAUJ,GAAV,CAELK,KAAAA,CAASZ,IAAA,CAAKQ,KAAL,CAAW,IAAX,CAAiBH,IAAjB,CACbD,SAAA,CAASK,KAAT,CAAiBA,KAAA,CAAMI,GAAN,CAAUN,GAAV,CAAeK,IAAf,CAAjB,EAA2CH,KAC3C,OAAOG,KAViB,CAY1BR,SAAA,CAASK,KAAT,CAAiB,KAAKV,OAAL,CAAae,KAAb;AAAsBC,QAAtB,CACjB,OAAOX,SAjBwB,CAjDjC,IAAIW,SAAWnB,OAAA,CAAQ,sCAAR,CAsEfG,QAAA,CAAQe,KAAR,CAAgBC,QAEhBlB,OAAA,CAAOC,OAAP,CAAiBC,OAzE8E;",
"sources":["node_modules/lodash/memoize.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$memoize\"] = function(global,require,module,exports) {\nvar MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n\n};"],
"names":["shadow$provide","global","require","module","exports","memoize","func","resolver","TypeError","FUNC_ERROR_TEXT","memoized","args","arguments","key","apply","cache","has","get","result","set","Cache","MapCache"]
}
